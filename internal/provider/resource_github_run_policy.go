package provider

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	stepsecurityapi "github.com/step-security/terraform-provider-stepsecurity/internal/stepsecurity-api"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource                = &githubRunPolicyResource{}
	_ resource.ResourceWithConfigure   = &githubRunPolicyResource{}
	_ resource.ResourceWithImportState = &githubRunPolicyResource{}
)

// NewGithubRunPolicyResource is a helper function to simplify the provider implementation.
func NewGithubRunPolicyResource() resource.Resource {
	return &githubRunPolicyResource{}
}

// githubRunPolicyResource is the resource implementation.
type githubRunPolicyResource struct {
	client stepsecurityapi.Client
}

// githubRunPolicyResourceModel maps the resource schema data.
type githubRunPolicyResourceModel struct {
	Owner         types.String `tfsdk:"owner"`
	Name          types.String `tfsdk:"name"`
	PolicyID      types.String `tfsdk:"policy_id"`
	AllRepos      types.Bool   `tfsdk:"all_repos"`
	AllOrgs       types.Bool   `tfsdk:"all_orgs"`
	Repositories  types.List   `tfsdk:"repositories"`
	PolicyConfig  types.Object `tfsdk:"policy_config"`
	CreatedBy     types.String `tfsdk:"created_by"`
	CreatedAt     types.String `tfsdk:"created_at"`
	LastUpdatedBy types.String `tfsdk:"last_updated_by"`
	LastUpdatedAt types.String `tfsdk:"last_updated_at"`
}

// policyConfigModel maps the policy configuration data.
type policyConfigModel struct {
	Owner                          types.String `tfsdk:"owner"`
	Name                           types.String `tfsdk:"name"`
	EnableActionPolicy             types.Bool   `tfsdk:"enable_action_policy"`
	AllowedActions                 types.Map    `tfsdk:"allowed_actions"`
	EnableRunsOnPolicy             types.Bool   `tfsdk:"enable_runs_on_policy"`
	DisallowedRunnerLabels         types.Set    `tfsdk:"disallowed_runner_labels"`
	EnableSecretsPolicy            types.Bool   `tfsdk:"enable_secrets_policy"`
	EnableCompromisedActionsPolicy types.Bool   `tfsdk:"enable_compromised_actions_policy"`
	IsDryRun                       types.Bool   `tfsdk:"is_dry_run"`
}

// Metadata returns the resource type name.
func (r *githubRunPolicyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_github_run_policy"
}

// Schema defines the schema for the resource.
func (r *githubRunPolicyResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manages a GitHub Actions run policy in StepSecurity.",
		Attributes: map[string]schema.Attribute{
			"owner": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The GitHub organization or user that owns this policy.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The name of the run policy.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"policy_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The unique identifier for this policy generated by StepSecurity.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"all_repos": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
				MarkdownDescription: "Whether this policy applies to all repositories in the organization.",
			},
			"all_orgs": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
				MarkdownDescription: "Whether this policy applies to all organizations.",
			},
			"repositories": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				MarkdownDescription: "List of specific repositories this policy applies to.",
			},
			"policy_config": schema.SingleNestedAttribute{
				Required:            true,
				MarkdownDescription: "The configuration for this run policy.",
				Attributes: map[string]schema.Attribute{
					"owner": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "The owner of the policy configuration.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "The name of the policy configuration.",
					},
					"enable_action_policy": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Default:             booldefault.StaticBool(false),
						MarkdownDescription: "Whether to enable the action policy.",
					},
					"allowed_actions": schema.MapAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						MarkdownDescription: "Map of allowed actions and their permissions (e.g., 'actions/checkout': 'allow').",
					},
					"enable_runs_on_policy": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Default:             booldefault.StaticBool(false),
						MarkdownDescription: "Whether to enable the runs-on policy.",
					},
					"disallowed_runner_labels": schema.SetAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						MarkdownDescription: "Set of disallowed runner labels.",
					},
					"enable_secrets_policy": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Default:             booldefault.StaticBool(false),
						MarkdownDescription: "Whether to enable the secrets policy.",
					},
					"enable_compromised_actions_policy": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Default:             booldefault.StaticBool(false),
						MarkdownDescription: "Whether to enable the compromised actions policy.",
					},
					"is_dry_run": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Default:             booldefault.StaticBool(false),
						MarkdownDescription: "Whether this policy is in dry-run mode.",
					},
				},
			},
			"created_by": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The user who created this policy.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The timestamp when this policy was created.",
			},
			"last_updated_by": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The user who last updated this policy.",
			},
			"last_updated_at": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The timestamp when this policy was last updated.",
			},
		},
	}
}

// Configure adds the provider configured client to the resource.
func (r *githubRunPolicyResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(stepsecurityapi.Client)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected stepsecurityapi.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.client = client
}

// Create creates the resource and sets the initial Terraform state.
func (r *githubRunPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan githubRunPolicyResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Extract policy configuration
	var policyConfig policyConfigModel
	diags = plan.PolicyConfig.As(ctx, &policyConfig, basetypes.ObjectAsOptions{})
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Convert to API request format
	createRequest := stepsecurityapi.CreateRunPolicyRequest{
		Name:     plan.Name.ValueString(),
		AllRepos: plan.AllRepos.ValueBool(),
		AllOrgs:  plan.AllOrgs.ValueBool(),
		PolicyConfig: stepsecurityapi.RunPolicyConfig{
			Owner:                          policyConfig.Owner.ValueString(),
			Name:                           policyConfig.Name.ValueString(),
			EnableActionPolicy:             policyConfig.EnableActionPolicy.ValueBool(),
			EnableRunsOnPolicy:             policyConfig.EnableRunsOnPolicy.ValueBool(),
			EnableSecretsPolicy:            policyConfig.EnableSecretsPolicy.ValueBool(),
			EnableCompromisedActionsPolicy: policyConfig.EnableCompromisedActionsPolicy.ValueBool(),
			IsDryRun:                       policyConfig.IsDryRun.ValueBool(),
		},
	}

	// Handle repositories list
	if !plan.Repositories.IsNull() {
		var repos []string
		diags = plan.Repositories.ElementsAs(ctx, &repos, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		createRequest.Repositories = repos
	}

	// Handle allowed actions map
	if !policyConfig.AllowedActions.IsNull() {
		var allowedActions map[string]string
		diags = policyConfig.AllowedActions.ElementsAs(ctx, &allowedActions, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		createRequest.PolicyConfig.AllowedActions = allowedActions
	}

	// Handle disallowed runner labels set
	if !policyConfig.DisallowedRunnerLabels.IsNull() {
		var disallowedLabels []string
		diags = policyConfig.DisallowedRunnerLabels.ElementsAs(ctx, &disallowedLabels, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}

		// Convert to map[string]struct{} as expected by API
		disallowedMap := make(map[string]struct{})
		for _, label := range disallowedLabels {
			disallowedMap[label] = struct{}{}
		}
		createRequest.PolicyConfig.DisallowedRunnerLabels = disallowedMap
	}

	tflog.Debug(ctx, "Creating run policy", map[string]interface{}{
		"owner": plan.Owner.ValueString(),
		"name":  plan.Name.ValueString(),
	})

	// Create the run policy
	createdPolicy, err := r.client.CreateRunPolicy(ctx, plan.Owner.ValueString(), createRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating run policy",
			"Could not create run policy, unexpected error: "+err.Error(),
		)
		return
	}

	// Update the plan with the response data
	r.updateModelFromAPI(ctx, &plan, createdPolicy, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
}

// Read refreshes the Terraform state with the latest data.
func (r *githubRunPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state githubRunPolicyResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get run policy from API
	policy, err := r.client.GetRunPolicy(ctx, state.Owner.ValueString(), state.PolicyID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError(
			"Error reading run policy",
			"Could not read run policy ID "+state.PolicyID.ValueString()+": "+err.Error(),
		)
		return
	}

	// Update the state with the response data
	r.updateModelFromAPI(ctx, &state, policy, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, state)
	resp.Diagnostics.Append(diags...)
}

// Update updates the resource and sets the updated Terraform state on success.
func (r *githubRunPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan githubRunPolicyResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Extract policy configuration
	var policyConfig policyConfigModel
	diags = plan.PolicyConfig.As(ctx, &policyConfig, basetypes.ObjectAsOptions{})
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Convert to API request format
	updateRequest := stepsecurityapi.UpdateRunPolicyRequest{
		Name:     plan.Name.ValueString(),
		AllRepos: plan.AllRepos.ValueBool(),
		AllOrgs:  plan.AllOrgs.ValueBool(),
		PolicyConfig: stepsecurityapi.RunPolicyConfig{
			Owner:                          policyConfig.Owner.ValueString(),
			Name:                           policyConfig.Name.ValueString(),
			EnableActionPolicy:             policyConfig.EnableActionPolicy.ValueBool(),
			EnableRunsOnPolicy:             policyConfig.EnableRunsOnPolicy.ValueBool(),
			EnableSecretsPolicy:            policyConfig.EnableSecretsPolicy.ValueBool(),
			EnableCompromisedActionsPolicy: policyConfig.EnableCompromisedActionsPolicy.ValueBool(),
			IsDryRun:                       policyConfig.IsDryRun.ValueBool(),
		},
	}

	// Handle repositories list
	if !plan.Repositories.IsNull() {
		var repos []string
		diags = plan.Repositories.ElementsAs(ctx, &repos, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		updateRequest.Repositories = repos
	}

	// Handle allowed actions map
	if !policyConfig.AllowedActions.IsNull() {
		var allowedActions map[string]string
		diags = policyConfig.AllowedActions.ElementsAs(ctx, &allowedActions, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		updateRequest.PolicyConfig.AllowedActions = allowedActions
	}

	// Handle disallowed runner labels set
	if !policyConfig.DisallowedRunnerLabels.IsNull() {
		var disallowedLabels []string
		diags = policyConfig.DisallowedRunnerLabels.ElementsAs(ctx, &disallowedLabels, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}

		// Convert to map[string]struct{} as expected by API
		disallowedMap := make(map[string]struct{})
		for _, label := range disallowedLabels {
			disallowedMap[label] = struct{}{}
		}
		updateRequest.PolicyConfig.DisallowedRunnerLabels = disallowedMap
	}

	// Update the run policy
	updatedPolicy, err := r.client.UpdateRunPolicy(ctx, plan.Owner.ValueString(), plan.PolicyID.ValueString(), updateRequest)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error updating run policy",
			"Could not update run policy, unexpected error: "+err.Error(),
		)
		return
	}

	// Update the plan with the response data
	r.updateModelFromAPI(ctx, &plan, updatedPolicy, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
}

// Delete deletes the resource and removes the Terraform state on success.
func (r *githubRunPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state githubRunPolicyResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Delete the run policy
	err := r.client.DeleteRunPolicy(ctx, state.Owner.ValueString(), state.PolicyID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError(
			"Error deleting run policy",
			"Could not delete run policy, unexpected error: "+err.Error(),
		)
		return
	}
}

// ImportState imports the resource state.
func (r *githubRunPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// The import ID should be the owner name
	id := req.ID

	// Split the ID into owner and policy name
	splitted := strings.Split(id, "/")
	if len(splitted) != 2 {
		resp.Diagnostics.AddError(
			"Invalid Import ID",
			fmt.Sprintf("Expected owner/policy_name, got: %s", id),
		)
		return
	}

	// Set the owner/policy name in the state
	owner := splitted[0]
	policyID := splitted[1]
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("owner"), owner)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("policy_id"), policyID)...)

	// Now call Read to populate the rest of the state
	readReq := resource.ReadRequest{
		State: resp.State,
	}
	readResp := &resource.ReadResponse{
		State: resp.State,
	}

	r.Read(ctx, readReq, readResp)

	// Copy any diagnostics and updated state from Read
	resp.Diagnostics.Append(readResp.Diagnostics...)
	resp.State = readResp.State
}

// updateModelFromAPI updates the Terraform model with data from the API response.
func (r *githubRunPolicyResource) updateModelFromAPI(_ context.Context, model *githubRunPolicyResourceModel, policy *stepsecurityapi.RunPolicy, diags *diag.Diagnostics) {

	if strings.Contains(policy.Owner, "#[all]") {
		model.Owner = types.StringValue(policy.Owner[:strings.Index(policy.Owner, "#")])
	}
	// model.Owner = types.StringValue(policy.Owner)
	model.Name = types.StringValue(policy.Name)
	model.PolicyID = types.StringValue(policy.PolicyID)
	model.AllRepos = types.BoolValue(policy.AllRepos)
	model.AllOrgs = types.BoolValue(policy.AllOrgs)
	model.CreatedBy = types.StringValue(policy.CreatedBy)
	model.CreatedAt = types.StringValue(policy.CreatedAt.Format(time.RFC3339))
	model.LastUpdatedBy = types.StringValue(policy.LastUpdatedBy)
	model.LastUpdatedAt = types.StringValue(policy.LastUpdatedAt.Format(time.RFC3339))

	// Handle repositories list
	if policy.Repositories != nil {
		repoList := make([]attr.Value, len(policy.Repositories))
		for i, repo := range policy.Repositories {
			repoList[i] = types.StringValue(repo)
		}
		listValue, listDiags := types.ListValue(types.StringType, repoList)
		diags.Append(listDiags...)
		model.Repositories = listValue
	} else {
		model.Repositories = types.ListNull(types.StringType)
	}

	// Handle policy configuration
	policyConfigAttrs := map[string]attr.Value{
		"owner":                             types.StringValue(policy.PolicyConfig.Owner),
		"name":                              types.StringValue(policy.PolicyConfig.Name),
		"enable_action_policy":              types.BoolValue(policy.PolicyConfig.EnableActionPolicy),
		"enable_runs_on_policy":             types.BoolValue(policy.PolicyConfig.EnableRunsOnPolicy),
		"enable_secrets_policy":             types.BoolValue(policy.PolicyConfig.EnableSecretsPolicy),
		"enable_compromised_actions_policy": types.BoolValue(policy.PolicyConfig.EnableCompromisedActionsPolicy),
		"is_dry_run":                        types.BoolValue(policy.PolicyConfig.IsDryRun),
	}

	// Handle allowed actions map
	if policy.PolicyConfig.AllowedActions != nil {
		allowedActionsMap := make(map[string]attr.Value)
		for action, permission := range policy.PolicyConfig.AllowedActions {
			allowedActionsMap[action] = types.StringValue(permission)
		}
		mapValue, mapDiags := types.MapValue(types.StringType, allowedActionsMap)
		diags.Append(mapDiags...)
		policyConfigAttrs["allowed_actions"] = mapValue
	} else {
		policyConfigAttrs["allowed_actions"] = types.MapNull(types.StringType)
	}

	// Handle disallowed runner labels set
	if policy.PolicyConfig.DisallowedRunnerLabels != nil {
		disallowedLabelsList := make([]attr.Value, 0, len(policy.PolicyConfig.DisallowedRunnerLabels))
		for label := range policy.PolicyConfig.DisallowedRunnerLabels {
			disallowedLabelsList = append(disallowedLabelsList, types.StringValue(label))
		}
		setValue, setDiags := types.SetValue(types.StringType, disallowedLabelsList)
		diags.Append(setDiags...)
		policyConfigAttrs["disallowed_runner_labels"] = setValue
	} else {
		policyConfigAttrs["disallowed_runner_labels"] = types.SetNull(types.StringType)
	}

	// Create the policy config object
	policyConfigAttrTypes := map[string]attr.Type{
		"owner":                             types.StringType,
		"name":                              types.StringType,
		"enable_action_policy":              types.BoolType,
		"allowed_actions":                   types.MapType{ElemType: types.StringType},
		"enable_runs_on_policy":             types.BoolType,
		"disallowed_runner_labels":          types.SetType{ElemType: types.StringType},
		"enable_secrets_policy":             types.BoolType,
		"enable_compromised_actions_policy": types.BoolType,
		"is_dry_run":                        types.BoolType,
	}

	policyConfigObj, objDiags := types.ObjectValue(policyConfigAttrTypes, policyConfigAttrs)
	diags.Append(objDiags...)
	model.PolicyConfig = policyConfigObj
}
